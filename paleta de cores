<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Seletor de Cores Profissional</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #4285F4;
      --secondary: #34A853;
      --background: #f8f9fa;
      --card: #ffffff;
      --text: #333333;
      --border: #e0e0e0;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Roboto', sans-serif;
      background-color: var(--background);
      color: var(--text);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
    }

    .container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
      background: var(--card);
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    h1 {
      color: var(--primary);
      text-align: center;
      margin-bottom: 24px;
      font-weight: 700;
    }

    .color-controls {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: flex-end;
      margin-bottom: 24px;
    }

    .input-group {
      flex: 1;
      min-width: 200px;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: var(--text);
    }

    input[type="color"] {
      width: 100%;
      height: 50px;
      cursor: pointer;
      border: 2px solid var(--border);
      border-radius: 8px;
      padding: 5px;
    }

    button {
      padding: 12px 20px;
      background-color: var(--primary);
      color: white;
      border: none;
      border-radius: 8px;
      font-weight: 500;
      cursor: pointer;
      transition: background 0.3s;
      flex-shrink: 0;
    }

    button:hover {
      background-color: #3367D6;
    }

    #addColorBtn {
      height: 50px;
    }

    .color-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
      gap: 16px;
      margin-bottom: 24px;
    }

    .color-card {
      background: var(--card);
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s;
    }

    .color-card:hover {
      transform: translateY(-4px);
    }

    .color-preview {
      height: 100px;
      width: 100%;
    }

    .color-info {
      padding: 12px;
    }

    .color-code {
      font-family: 'Courier New', monospace;
      font-size: 14px;
      margin: 8px 0;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .copy-btn {
      background: none;
      border: none;
      color: var(--primary);
      cursor: pointer;
      padding: 4px;
      margin-left: 8px;
    }

    .download-section {
      background: rgba(66, 133, 244, 0.05);
      padding: 20px;
      border-radius: 10px;
      margin-top: 24px;
    }

    .download-controls {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      align-items: center;
    }

    select {
      padding: 10px 15px;
      border-radius: 6px;
      border: 1px solid var(--border);
      min-width: 120px;
    }

    #downloadBtn {
      background-color: var(--secondary);
    }

    #downloadBtn:hover {
      background-color: #2D9249;
    }

    @media (max-width: 600px) {
      .color-controls {
        flex-direction: column;
      }
      
      .input-group, button {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>ðŸŽ¨ Seletor de Cores Profissional</h1>
    
    <div class="color-controls">
      <div class="input-group">
        <label for="colorInput">Selecione uma cor:</label>
        <input type="color" id="colorInput" value="#4285F4">
      </div>
      <button id="addColorBtn">Adicionar Cor</button>
    </div>

    <div class="color-grid" id="colorGrid"></div>

    <div class="download-section">
      <h3>Exportar Paleta</h3>
      <div class="download-controls">
        <select id="formatSelect">
          <option value="png">PNG</option>
          <option value="jpg">JPG</option>
          <option value="psd">PSD</option>
          <option value="ai">AI</option>
        </select>
        <button id="downloadBtn">Baixar Todas</button>
      </div>
    </div>
  </div>

  <script>
    const colorInput = document.getElementById("colorInput");
    const addColorBtn = document.getElementById("addColorBtn");
    const colorGrid = document.getElementById("colorGrid");
    const formatSelect = document.getElementById("formatSelect");
    const downloadBtn = document.getElementById("downloadBtn");

    let colors = [];

    // Adiciona cor Ã  paleta
    addColorBtn.addEventListener("click", () => {
      const hex = colorInput.value;
      const rgb = hexToRgb(hex);
      
      colors.push({ hex, rgb });
      renderColors();
    });

    // Converte HEX para RGB
    function hexToRgb(hex) {
      const r = parseInt(hex.slice(1, 3), 16);
      const g = parseInt(hex.slice(3, 5), 16);
      const b = parseInt(hex.slice(5, 7), 16);
      return { r, g, b };
    }

    // Renderiza as cores
    function renderColors() {
      colorGrid.innerHTML = colors.map(color => `
        <div class="color-card">
          <div class="color-preview" style="background: ${color.hex};"></div>
          <div class="color-info">
            <div class="color-code">
              <span>${color.hex}</span>
              <button class="copy-btn" onclick="copyToClipboard('${color.hex}')" aria-label="Copiar HEX">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"/>
                </svg>
              </button>
            </div>
            <div class="color-code">
              <span>rgb(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})</span>
              <button class="copy-btn" onclick="copyToClipboard('rgb(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})')" aria-label="Copiar RGB">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      `).join("");
    }

    // Copia texto
    function copyToClipboard(text) {
      navigator.clipboard.writeText(text)
        .then(() => {
          alert(`Copiado: ${text}`);
        });
    }

    // FunÃ§Ã£o para fazer download de um arquivo
    function downloadFile(content, fileName, contentType) {
      const blob = new Blob([content], { type: contentType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    // Gera o conteÃºdo do arquivo baseado no formato selecionado
    function generateFileContent(format) {
      switch(format) {
        case 'png':
        case 'jpg':
        case 'psd':
        case 'ai':
          // Para formatos de imagem, vamos criar um arquivo de texto com as cores
          // Em uma aplicaÃ§Ã£o real, vocÃª precisaria de um backend para gerar imagens reais
          return colors.map(color => `${color.hex} - RGB(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})`).join('\n');
        default:
          return JSON.stringify(colors, null, 2);
      }
    }

    // Gera o nome do arquivo baseado no formato selecionado
    function generateFileName(format) {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      switch(format) {
        case 'png':
          return `paleta-cores-${timestamp}.png.txt`;
        case 'jpg':
          return `paleta-cores-${timestamp}.jpg.txt`;
        case 'psd':
          return `paleta-cores-${timestamp}.psd.txt`;
        case 'ai':
          return `paleta-cores-${timestamp}.ai.txt`;
        default:
          return `paleta-cores-${timestamp}.json`;
      }
    }

    // FunÃ§Ã£o para realizar o download
    downloadBtn.addEventListener("click", () => {
      if (colors.length === 0) {
        alert("Adicione cores primeiro!");
        return;
      }
      
      const format = formatSelect.value;
      const content = generateFileContent(format);
      const fileName = generateFileName(format);
      const contentType = format === 'json' ? 'application/json' : 'text/plain';
      
      downloadFile(content, fileName, contentType);
    });
  </script>
</body>
</html>
